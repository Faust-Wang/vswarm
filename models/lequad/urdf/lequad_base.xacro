<?xml version="1.0"?>

<robot name="lequad" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Properties that can be assigned at build time as arguments.
  Is there a reason not to make all properties arguments?
  -->
  <xacro:arg name='name' default='lequad' />
  <xacro:arg name='mavlink_addr' default='INADDR_ANY' />
  <xacro:arg name='mavlink_udp_port' default='14560' />
  <xacro:arg name='mavlink_tcp_port' default='4560' />
  <xacro:arg name='serial_enabled' default='false' />
  <xacro:arg name='serial_device' default='/dev/ttyACM0' />
  <xacro:arg name='baudrate' default='921600' />
  <xacro:arg name='qgc_addr' default='INADDR_ANY' />
  <xacro:arg name='qgc_udp_port' default='14550' />
  <xacro:arg name='sdk_addr' default='INADDR_ANY' />
  <xacro:arg name='sdk_udp_port' default='15540' />
  <xacro:arg name='hil_mode' default='false' />
  <xacro:arg name='hil_state_level' default='false' />
  <xacro:arg name='send_vision_estimation' default='false' />
  <xacro:arg name='send_odometry' default='false' />
  <xacro:arg name='enable_lockstep' default='true' />
  <xacro:arg name='use_tcp' default='true' />
  <xacro:arg name='vehicle_is_tailsitter' default='false' />
  <xacro:arg name='visual_material' default='DarkGrey' />
  <xacro:arg name='enable_mavlink_interface' default='true' />
  <xacro:arg name='enable_wind' default='false' />
  <!-- The following causes segfault with multiple vehicles if defaults to true!!! -->
  <xacro:arg name='enable_ground_truth' default='false' />
  <xacro:arg name='enable_logging' default='false' />
  <xacro:arg name='log_file' default='iris' />
  <xacro:arg name='enable_cameras' default='true' />
  <xacro:arg name='use_sphere_visual' default='false' />

  <!-- macros for gazebo plugins, sensors -->
  <xacro:include filename="component_snippets.xacro" />

  <!-- Instantiate lequad "mechanics" -->
  <xacro:include filename="lequad.xacro" />

  <xacro:if value="$(arg enable_cameras)">

    <!-- OpenMV cam macros -->
    <xacro:include filename="$(find vswarm)/models/firefly/urdf/firefly_macro.xacro" />

    <!-- Calculate image width when using OpenMV with HFOV=115 / VFOV=86 -->
    <xacro:property name="visualize_fov" value="false" />
    <xacro:property name="offset" value="0.22" />
    <xacro:property name="offset_z" value="0.06" />
    <xacro:property name="enable_collision" value="false" />
    <xacro:property name="image_width" value="720" />
    <xacro:property name="image_height" value="540" />
    <!-- Focal length of 262 pixels corresponds to horizontal FOV: 157.45405057030257 deg  -->
    <!-- Using equidistant projection: r = f * theta -->
    <xacro:property name="horizontal_fov" value="2.7480916030534353" />
    <xacro:property name="frame_rate" value="10" />
    <xacro:property name="image_format" value="L8" />  <!-- R8G8B8-->
    <xacro:property name="min_distance" value="0.01" />
    <xacro:property name="max_distance" value="100" />
    <xacro:property name="enable_visual" value="false" />

    <!-- Mount a front-facing camera. -->
    <xacro:firefly_macro
      namespace="${namespace}"
      parent_link="base_link"
      camera_suffix="front"
      frame_rate="${frame_rate}"
      horizontal_fov="${horizontal_fov}"
      image_width="${image_width}"
      image_height="${image_height}"
      image_format="${image_format}"
      min_distance="${min_distance}"
      max_distance="${max_distance}"
      visualize_fov="${visualize_fov}"
      noise_mean="0.0"
      noise_stddev="0.0"
      enable_collision="${enable_collision}"
      enable_visual="${enable_visual}">
      <origin xyz="${offset} 0 0" rpy="0 0 0" />
    </xacro:firefly_macro>

    <!-- Mount a right-facing camera. -->
    <xacro:firefly_macro
      namespace="${namespace}"
      parent_link="base_link"
      camera_suffix="right"
      frame_rate="${frame_rate}"
      horizontal_fov="${horizontal_fov}"
      image_width="${image_width}"
      image_height="${image_height}"
      image_format="${image_format}"
      min_distance="${min_distance}"
      max_distance="${max_distance}"
      visualize_fov="${visualize_fov}"
      noise_mean="0.0"
      noise_stddev="0.0"
      enable_collision="${enable_collision}"
      enable_visual="${enable_visual}">
      <origin xyz="0 -${offset} 0" rpy="0 0 -${pi / 2}" />
    </xacro:firefly_macro>

    <!-- Mount a back-facing camera. -->
    <xacro:firefly_macro
      namespace="${namespace}"
      parent_link="base_link"
      camera_suffix="back"
      frame_rate="${frame_rate}"
      horizontal_fov="${horizontal_fov}"
      image_width="${image_width}"
      image_height="${image_height}"
      image_format="${image_format}"
      min_distance="${min_distance}"
      max_distance="${max_distance}"
      visualize_fov="${visualize_fov}"
      noise_mean="0.0"
      noise_stddev="0.0"
      enable_collision="${enable_collision}"
      enable_visual="${enable_visual}">
      <origin xyz="-${offset} 0 0" rpy="0 0 -${pi}" />
    </xacro:firefly_macro>

    <!-- Mount a left-facing camera. -->
    <xacro:firefly_macro
      namespace="${namespace}"
      parent_link="base_link"
      camera_suffix="left"
      frame_rate="${frame_rate}"
      horizontal_fov="${horizontal_fov}"
      image_width="${image_width}"
      image_height="${image_height}"
      image_format="${image_format}"
      min_distance="${min_distance}"
      max_distance="${max_distance}"
      visualize_fov="${visualize_fov}"
      noise_mean="0.0"
      noise_stddev="0.0"
      enable_collision="${enable_collision}"
      enable_visual="${enable_visual}">
      <origin xyz="0 ${offset} 0" rpy="0 0 -${pi + pi / 2}" />
    </xacro:firefly_macro>

  </xacro:if>

  <xacro:if value="$(arg enable_wind)">
    <xacro:wind_plugin_macro
        namespace="${namespace}"
        wind_direction="0 0 1"
        wind_force_mean="0.7"
        xyz_offset="1 0 0"
        wind_gust_direction="0 0 0"
        wind_gust_duration="0"
        wind_gust_start="0"
        wind_gust_force_mean="0"
        />
  </xacro:if>


  <!-- Instantiate gps plugin. -->
  <xacro:gps_plugin_macro
    namespace="${namespace}"
    gps_noise="true"
    >
  </xacro:gps_plugin_macro>

  <!-- Instantiate magnetometer plugin. -->
  <xacro:magnetometer_plugin_macro
    namespace="${namespace}"
    pub_rate="20"
    noise_density="0.0004"
    random_walk="0.0000064"
    bias_correlation_time="600"
    mag_topic="/mag"
    >
  </xacro:magnetometer_plugin_macro>

  <!-- Instantiate barometer plugin. -->
  <xacro:barometer_plugin_macro
    namespace="${namespace}"
    pub_rate="10"
    baro_topic="/baro"
    >
  </xacro:barometer_plugin_macro>

  <xacro:if value="$(arg enable_mavlink_interface)">
  <!-- Instantiate mavlink telemetry interface. -->
  <xacro:mavlink_interface_macro
    namespace="${namespace}"
    imu_sub_topic="/imu"
    gps_sub_topic="/gps"
    mag_sub_topic="/mag"
    baro_sub_topic="/baro"
    mavlink_addr="$(arg mavlink_addr)"
    mavlink_udp_port="$(arg mavlink_udp_port)"
    mavlink_tcp_port="$(arg mavlink_tcp_port)"
    serial_enabled="$(arg serial_enabled)"
    serial_device="$(arg serial_device)"
    baudrate="$(arg baudrate)"
    qgc_addr="$(arg qgc_addr)"
    qgc_udp_port="$(arg qgc_udp_port)"
    sdk_addr="$(arg sdk_addr)"
    sdk_udp_port="$(arg sdk_udp_port)"
    hil_mode="$(arg hil_mode)"
    hil_state_level="$(arg hil_state_level)"
    vehicle_is_tailsitter="$(arg vehicle_is_tailsitter)"
    send_vision_estimation="$(arg send_vision_estimation)"
    send_odometry="$(arg send_odometry)"
    enable_lockstep="$(arg enable_lockstep)"
    use_tcp="$(arg use_tcp)"
    >
  </xacro:mavlink_interface_macro>
  </xacro:if>

  <!-- Mount an ADIS16448 IMU. -->
  <xacro:imu_plugin_macro
    namespace="${namespace}"
    imu_suffix=""
    parent_link="base_link"
    imu_topic="/imu"
    mass_imu_sensor="0.015"
    gyroscope_noise_density="0.0003394"
    gyroscopoe_random_walk="0.000038785"
    gyroscope_bias_correlation_time="1000.0"
    gyroscope_turn_on_bias_sigma="0.0087"
    accelerometer_noise_density="0.004"
    accelerometer_random_walk="0.006"
    accelerometer_bias_correlation_time="300.0"
    accelerometer_turn_on_bias_sigma="0.1960"
  >
    <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" />
    <origin xyz="0 0 0" rpy="0 0 0" />
  </xacro:imu_plugin_macro>

  <xacro:if value="$(arg enable_ground_truth)">
    <!-- Mount an IMU providing ground truth. -->
    <xacro:imu_plugin_macro
      namespace="${namespace}"
      imu_suffix="gt"
      parent_link="base_link"
      imu_topic="ground_truth/imu"
      mass_imu_sensor="0.00001"
      gyroscope_noise_density="0.0"
      gyroscopoe_random_walk="0.0"
      gyroscope_bias_correlation_time="1000.0"
      gyroscope_turn_on_bias_sigma="0.0"
      accelerometer_noise_density="0.0"
      accelerometer_random_walk="0.0"
      accelerometer_bias_correlation_time="300.0"
      accelerometer_turn_on_bias_sigma="0.0"
    >
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" />
      <origin xyz="0 0 0" rpy="0 0 0" />
    </xacro:imu_plugin_macro>

    <!-- Mount a generic odometry sensor providing ground truth. -->
    <xacro:odometry_plugin_macro
      namespace="${namespace}/ground_truth"
      odometry_sensor_suffix="gt"
      parent_link="base_link"
      pose_topic="pose"
      pose_with_covariance_topic="pose_with_covariance"
      position_topic="position"
      transform_topic="transform"
      odometry_topic="odometry"
      parent_frame_id="world"
      mass_odometry_sensor="0.00001"
      measurement_divisor="1"
      measurement_delay="0"
      unknown_delay="0.0"
      noise_normal_position="0 0 0"
      noise_normal_quaternion="0 0 0"
      noise_normal_linear_velocity="0 0 0"
      noise_normal_angular_velocity="0 0 0"
      noise_uniform_position="0 0 0"
      noise_uniform_quaternion="0 0 0"
      noise_uniform_linear_velocity="0 0 0"
      noise_uniform_angular_velocity="0 0 0"
      enable_odometry_map="false"
      odometry_map=""
      image_scale=""
    >
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" /> <!-- [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] -->
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
    </xacro:odometry_plugin_macro>
  </xacro:if>

  <xacro:if value="$(arg enable_logging)">
    <!-- Instantiate a logger -->
    <xacro:bag_plugin_macro
      namespace="${namespace}"
      bag_file="$(arg log_file)"
      rotor_velocity_slowdown_sim="${rotor_velocity_slowdown_sim}"
    >
    </xacro:bag_plugin_macro>
  </xacro:if>

</robot>
